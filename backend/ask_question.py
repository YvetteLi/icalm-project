import streamlit as st
from langchain_config.config import llm


def answer_student_question_prompt(flashcard, student_question):
    """
    Generates an answer to a student's question based on information from a flashcard and prior knowledge.

    The function crafts a prompt to a language model to assist in answering a student's question.
    It uses details from a given flashcard and considers previously explored flashcards as well as prior knowledge.
    If new evidence conflicts with prior knowledge, the function trusts the new evidence.

    Parameters:
    - flashcard (dict): A dictionary containing the 'question' and 'answer' keys with their respective strings.
    - student_question (str): A question posed by a student related to the flashcard content.

    Returns:
    - str: The response generated by the language model based on the provided information.
    """
    # Generate more examples using the LLM when not enough examples are found
    prompt = f"""
    You are a helpful teaching assistant. The user has made a mistake while answer the following question.

    The flashcard has the following information:
    - Flashcard Question: {flashcard['question']}
    - Flashcard Answer: {flashcard['answer']}

    The student asked you the following question
    - Student's question: {student_question}
    In this answer, we are allowed to use both information in the previous cards of {st.session_state.get('explored', [])}, as well as prior knowledge. 
   However, when new evidence conflicts with prior knowledge, we should trust the new evidence. 
   If the previous knowledge is not sufficient, We may not be able to answer the question. 
    """

    response = llm.predict(prompt).strip('\n')

    return response


@st.dialog("Ask a Question")
def answer_student_question(flashcard):
    """
        Displays a dialog allowing the user to ask a question about the current flashcard.

        This function provides a text input field for the user to ask a question related to the current
        flashcard. Upon pressing the button, it calls an Intelligent Tutor to get more details about the
        user's question. The original flashcard question, user's question, and the Intelligent Tutor's
        response are then displayed.

        Args:
        flashcard: A dictionary containing the current flashcard's data, specifically the 'question' key.
    """
    student_question = st.text_input("Ask a question about the current flashcard")
    if st.button("Ask Intelligent Tutor for more details"):
        response = answer_student_question_prompt(flashcard, student_question)
        st.write(f"Question: {flashcard['question']}.")
        st.write(f"Your Question: {student_question}")
        st.write(f"Response: {response}")
        st.cache_resource.clear()
